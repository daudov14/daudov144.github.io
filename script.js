// –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤ (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏)
const words = [
  { arabic: "ŸÉÿ™ÿßÿ®", russian: "–∫–Ω–∏–≥–∞" },
  { arabic: "ŸÇŸÑŸÖ", russian: "—Ä—É—á–∫–∞" },
  { arabic: "ÿ®ÿßÿ®", russian: "–¥–≤–µ—Ä—å" },
  { arabic: "ÿ¥ŸÖÿ≥", russian: "—Å–æ–ª–Ω—Ü–µ" },
  { arabic: "ŸÇŸÖÿ±", russian: "–ª—É–Ω–∞" },
];

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let currentUser = null;
let usersData = {};

function loadUsers() {
  const data = localStorage.getItem('arabRusUsers');
  usersData = data ? JSON.parse(data) : {};
}

function saveUsers() {
  localStorage.setItem('arabRusUsers', JSON.stringify(usersData));
}

function showAuthModal() {
  document.getElementById('modalOverlay').style.display = 'flex';
}

function hideAuthModal() {
  document.getElementById('modalOverlay').style.display = 'none';
}

function auth(username, password) {
  username = username.trim();
  if (!username || !password) return "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å";

  if (usersData[username]) {
    if (usersData[username].password !== password) {
      return "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å";
    }
  } else {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    usersData[username] = {
      password: password,
      bestScore: 0,
      progress: {}
    };
    saveUsers();
  }
  currentUser = username;
  return null;
}

document.getElementById('authSubmitBtn').addEventListener('click', () => {
  const username = document.getElementById('usernameInput').value;
  const password = document.getElementById('passwordInput').value;
  const error = auth(username, password);
  const errorEl = document.getElementById('authError');

  if (error) {
    errorEl.textContent = error;
  } else {
    errorEl.textContent = '';
    hideAuthModal();
    afterLogin();
  }
});

function afterLogin() {
  showOnlyBlock('menu');
  updateBestScore();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
function updateBestScore() {
  document.getElementById('bestScore').textContent = '–õ—É—á—à–∏–π: ' + (usersData[currentUser].bestScore || 0);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –±–ª–æ–∫–æ–≤, —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
function showOnlyBlock(blockId) {
  const blocks = ['menu', 'gameSection', 'wordsSection', 'recordsSection'];
  blocks.forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      if (id === blockId) {
        el.classList.add('visible');
        el.classList.remove('hidden');
      } else {
        el.classList.add('hidden');
        el.classList.remove('visible');
      }
    }
  });
}

// –õ–æ–≥–∏–∫–∞ –º–µ–Ω—é
document.getElementById('btnPlay').addEventListener('click', () => {
  startGame();
});

document.getElementById('btnAllWords').addEventListener('click', () => {
  showAllWords();
});

document.getElementById('btnBackToMenu').addEventListener('click', () => {
  endGame();
});

document.getElementById('btnBackFromWords').addEventListener('click', () => {
  showOnlyBlock('menu');
});

document.getElementById('backFromRecords').addEventListener('click', () => {
  showOnlyBlock('menu');
});

// –ò–∫–æ–Ω–∫–∞ —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤ —Å–Ω–∏–∑—É (—Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º)
const recordsIcon = document.createElement('button');
recordsIcon.id = 'btnRecordsBottom';
recordsIcon.title = '–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω—ã üèÜ';
recordsIcon.setAttribute('aria-label', '–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω—ã');
recordsIcon.className = 'btn-records-bottom';
recordsIcon.textContent = 'üèÜ –†–µ–∫–æ—Ä–¥—Å–º–µ–Ω—ã';
recordsIcon.style.position = 'fixed';
recordsIcon.style.bottom = '10px';
recordsIcon.style.left = '50%';
recordsIcon.style.transform = 'translateX(-50%)';
recordsIcon.style.background = '#0ff';
recordsIcon.style.color = '#0a1a27';
recordsIcon.style.border = 'none';
recordsIcon.style.borderRadius = '14px';
recordsIcon.style.padding = '10px 20px';
recordsIcon.style.fontWeight = '700';
recordsIcon.style.cursor = 'pointer';
recordsIcon.style.boxShadow = '0 0 12px #0ff';
recordsIcon.style.zIndex = '10000';
document.body.appendChild(recordsIcon);

recordsIcon.addEventListener('click', () => {
  showRecords();
});

// –ö–Ω–æ–ø–∫–∞ —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–∫—Ä—ã–≤–∞–µ–º
document.getElementById('btnRecords').style.display = 'none';

// –ó–≤—É–∫–∏
const errorSound = new Audio('https://actions.google.com/sounds/v1/cartoon/clang_and_wobble.ogg');

// –ò–≥—Ä–∞
let score = 0;
let currentQuestionIndex = 0;

function startGame() {
  score = 0;
  currentQuestionIndex = 0;
  showOnlyBlock('gameSection');
  updateScore(0);
  showQuestion();
}

function endGame() {
  showOnlyBlock('menu');
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (score > (usersData[currentUser].bestScore || 0)) {
    usersData[currentUser].bestScore = score;
    saveUsers();
    updateBestScore();
  }
}

function updateScore(newScore) {
  score = newScore;
  document.getElementById('score').textContent = '–û—á–∫–∏: ' + score;
}

function showQuestion() {
  if (currentQuestionIndex >= words.length) {
    alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–≤–æ–π —Å—á—ë—Ç: ' + score);
    endGame();
    return;
  }
  const q = words[currentQuestionIndex];
  const questionDiv = document.getElementById('question');
  questionDiv.textContent = '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ: ' + q.arabic;

  const answersDiv = document.getElementById('answers');
  answersDiv.innerHTML = '';

  // –°–æ—Å—Ç–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + 3 —Å–ª—É—á–∞–π–Ω—ã—Ö
  let options = [q.russian];
  while (options.length < 4) {
    const randWord = words[Math.floor(Math.random() * words.length)].russian;
    if (!options.includes(randWord)) options.push(randWord);
  }
  options = shuffleArray(options);

  options.forEach(opt => {
    const btn = document.createElement('button');
    btn.className = 'answer-btn';
    btn.textContent = opt;
    btn.onclick = () => {
      checkAnswer(opt);
      clearSelection();  // —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    };
    answersDiv.appendChild(btn);
  });
}

function checkAnswer(selected) {
  const correct = words[currentQuestionIndex].russian;
  if (selected === correct) {
    updateScore(score + 1);
  } else {
    errorSound.play();
  }
  currentQuestionIndex++;
  showQuestion();
}

function showAllWords() {
  showOnlyBlock('wordsSection');
  const allWordsList = document.getElementById('allWordsList');
  allWordsList.innerHTML = '';
  words.forEach(w => {
    const div = document.createElement('div');
    div.textContent = `${w.arabic} ‚Äî ${w.russian}`;
    allWordsList.appendChild(div);
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω–æ–≤
function showRecords() {
  showOnlyBlock('recordsSection');

  const arr = [];
  for (const user in usersData) {
    arr.push({ user: user, score: usersData[user].bestScore || 0 });
  }
  arr.sort((a,b) => b.score - a.score);

  const recordsList = document.getElementById('recordsList');
  recordsList.innerHTML = '';
  arr.forEach((r,i) => {
    recordsList.innerHTML += `<div>${i+1}. ${r.user}: ${r.score}</div>`;
  });
}

// –£—Ç–∏–ª–∏—Ç–∞: —Ç–∞—Å–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
function shuffleArray(arr) {
  for(let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i+1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// –£–±–∏—Ä–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function clearSelection() {
  if (window.getSelection) {
    const sel = window.getSelection();
    if (sel) sel.removeAllRanges();
  } else if (document.selection) {
    document.selection.empty();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUsers();
showAuthModal();
